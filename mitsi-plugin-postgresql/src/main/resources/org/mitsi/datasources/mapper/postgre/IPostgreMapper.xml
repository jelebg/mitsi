<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mitsi.datasources.mapper.postgre.IPostgreMapper">


<resultMap id="SchemaResultMap" type="org.mitsi.api.datasources.Schema">
	<result property="name" column="schema_name"/>
	<result property="current" column="is_current"/>
</resultMap>

<resultMap id="DatabaseObjectResultMap" type="org.mitsi.api.datasources.DatabaseObject">
  <constructor>
    <idArg column="id_type" javaType="String"/>
    <idArg column="id_schema" javaType="String"/>
    <idArg column="id_name" javaType="String"/>
  </constructor>
  <result property="secondaryType" column="secondary_type"/>
  <result property="description" column="object_comment"/>
  <collection property="columns" ofType="org.mitsi.api.datasources.Column">
      <result property="name" column="column_name"/>
      <result property="description" column="column_comment"/>
      <result property="type" column="column_type"/>
      <result property="length" column="column_length"/>
      <result property="precision" column="column_precision"/>
      <result property="scale" column="column_scale"/>
      <result property="defaultValue" column="column_default_value"/>
      <result property="nullable" column="column_nullable"/>
  </collection>
</resultMap>

<!-- 
			mitsi standard SQL 
-->

<select id="testOK" resultType="String">
	SELECT TO_CHAR(current_date, 'YYYYMMDD hh24:mi:ss')
</select>

<select id="getAllSchemas" resultMap="SchemaResultMap" fetchSize="2000">
	SELECT schema_name,
	CASE schema_name WHEN #{owner} THEN '1' ELSE '0' END is_current 
	FROM information_schema.schemata;
</select>

<!--  TODO : supprimer pg_attrdef ? -->
<select id="getTablesAndViews" resultMap="DatabaseObjectResultMap" fetchSize="2000">
	
  SELECT 
     (nc.nspname)::information_schema.sql_identifier AS id_schema,
     (c.relname)::information_schema.sql_identifier AS id_name,
     case when c.relkind='v' then 'view'
          when c.relkind='m' then 'matview'
          else 'table' end id_type,
     null secondary_type, <!--  TODO : postgresql table types -->
     (a.attname)::information_schema.sql_identifier AS column_name,
    <!-- TODO : A TESTER !!! -->
    CASE
      WHEN t.typcategory &lt;&gt; 'S' AND a.atttypmod &lt; 0 THEN null
      ELSE a.atttypmod-4
      END AS column_length,
    CASE
      WHEN t.typcategory = 'S' OR a.atttypmod = -1
      THEN null
      ELSE ((a.atttypmod - 4) &gt;&gt; 16) &amp; 65535
      END AS column_precision,
    CASE
      WHEN t.typcategory = 'S' OR a.atttypmod = -1 THEN null
      ELSE (a.atttypmod - 4) &amp; 65535
      END AS column_scale,
    CASE WHEN atthasdef THEN (SELECT adsrc FROM pg_attrdef WHERE pg_attrdef.adrelid = a.attrelid AND pg_attrdef.adnum = a.attnum)
    ELSE null
    END  AS column_default_value,
    (
        CASE
        WHEN (a.attnotnull OR ((t.typtype = 'd'::"char") AND t.typnotnull)) THEN 'false'::text
        ELSE 'true'::text
        END) AS column_nullable,
     (
         CASE
             WHEN (t.typtype = 'd'::"char") THEN
             CASE
                 WHEN ((bt.typelem &lt;&gt; (0)::oid) AND (bt.typlen = '-1'::integer)) THEN 'ARRAY'::text
                 WHEN (nbt.nspname = 'pg_catalog'::name) THEN format_type(t.typbasetype, NULL::integer)
                 ELSE 'USER-DEFINED'::text
             END
             ELSE
             CASE
                 WHEN ((t.typelem &lt;&gt; (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text
                 WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(a.atttypid, NULL::integer)
                 ELSE 'USER-DEFINED'::text
             END
         END)::information_schema.character_data AS column_type,
     des.description object_comment, 
     pg_catalog.col_description(c.oid, a.attnum) column_comment
      FROM (((pg_attribute a
      JOIN (pg_class c
      JOIN pg_namespace nc ON ((c.relnamespace = nc.oid))) ON ((a.attrelid = c.oid)))
      JOIN (pg_type t
      JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((a.atttypid = t.oid)))
      LEFT JOIN (pg_type bt
      JOIN pg_namespace nbt ON ((bt.typnamespace = nbt.oid))) ON (((t.typtype = 'd'::"char") AND (t.typbasetype = bt.oid))))
      LEFT JOIN pg_description des ON (c.oid=des.objoid AND des.objsubid=0)
      LEFT JOIN  pg_constraint pk ON (c.oid=pk.conrelid AND a.attnum=ANY(pk.conkey) AND pk.contype='p')
   WHERE ((NOT pg_is_other_temp_schema(nc.oid)) AND (a.attnum > 0) AND (NOT a.attisdropped) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'm'::"char", 'f'::"char"]))
     AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)))
   	AND upper((nc.nspname)::information_schema.sql_identifier) = upper(#{owner})
	ORDER BY nc.nspname, c.relname, c.relkind, a.attnum
</select>

<select id="getSchemaIndexes" resultType="org.mitsi.api.datasources.Index" fetchSize="2000">
	SELECT
	    nc.nspname      AS owner,
	    t.relname       AS tableName,
	    i.relname       AS name,
	    am.amname       AS type,
	    ix.indisunique	AS uniqueness,
	    string_agg(att.attname, ',' order by array_position(ix.indkey, att.attnum)) AS columns
	FROM
	    pg_class t
	    JOIN pg_index ix     ON t.oid = ix.indrelid
	    JOIN pg_class i      ON i.oid = ix.indexrelid
	    JOIN pg_namespace nc ON t.relnamespace = nc.oid
	    JOIN pg_am am        ON     i.relam = am.oid
	    JOIN pg_attribute att       ON t.oid = att.attrelid AND att.attnum = any(ix.indkey) AND NOT att.attisdropped 
	WHERE
	    t.relkind IN ('r', 'm')
	    AND upper(nc.nspname) = upper(#{owner}) 
	GROUP BY nc.nspname, t.relname, i.relname, am.amname, ix.indisunique
</select>

<select id="getSchemaConstraints" resultType="org.mitsi.api.datasources.Constraint" fetchSize="2000">
	SELECT 
	    nc.nspname::information_schema.sql_identifier AS owner,
	    c.conname::information_schema.sql_identifier AS name,
	    r.relname::information_schema.sql_identifier AS tableName,
	    case when c.contype='f' then 'R' else upper(c.contype) end AS type,
	    string_agg(a.attname, ',' order by array_position(c.conkey, a.attnum)) columns,
	    fnr.nspname::information_schema.sql_identifier AS fkConstraintOwner,
	    fr.relname::information_schema.sql_identifier AS fkTable,
	    fnr.nspname::information_schema.sql_identifier AS  fkConstraintName,
	    string_agg(fa.attname, ',' order by array_position(c.confkey, fa.attnum)) fkColumns
	
	FROM pg_namespace nr
	    join pg_class r on nr.oid = r.relnamespace 
	    join pg_constraint c on r.oid = c.conrelid 
	    join pg_namespace nc on nc.oid = c.connamespace 
	    join pg_attribute a on r.oid = a.attrelid AND a.attnum = any(c.conkey) AND NOT a.attisdropped
	    left join pg_class fr on fr.oid = c.confrelid
	    left join pg_attribute fa on fr.oid = fa.attrelid AND fa.attnum = any(c.confkey) AND NOT fa.attisdropped
	    left join pg_namespace fnr on fnr.oid = fr.relnamespace 
	WHERE 
	   (c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char", 'c'::"char", 'x'::"char"]))
	AND r.relkind = 'r'::"char" AND NOT pg_is_other_temp_schema(nr.oid) 
	AND upper(nc.nspname) = upper(#{owner})
	group by nc.nspname, c.conname, r.relname, c.contype, c.conkey, fr.relname, fnr.nspname
</select>

<select id="getData" >
	SELECT * FROM ${owner}."${tableName}"							
	<if test="filters!=null and filters.length > 0">
		WHERE <foreach item="filter" collection="filters" open="" separator=" AND " close="">
		 ${filter.name} = #{filter.filter} </foreach>
	</if>
	<if test="orderByColumns!=null and orderByColumns.length > 0">
		ORDER BY <foreach item="orderByColumn" collection="orderByColumns" open="" separator=", " close=""
		> ${orderByColumn.column}<choose><when test="orderByColumn.ascending">ASC</when><otherwise>DESC</otherwise></choose></foreach>
	</if>
	OFFSET #{fromRow} LIMIT #{count}
</select>



<!-- 
			Oracle specific SQL for database details 
-->



<select id="getTablesDetails" >
  SELECT 
     (nc.nspname)::information_schema.sql_identifier AS id_schema,
     (c.relname)::information_schema.sql_identifier AS id_name,
     case when c.relkind='v' then 'view'
          when c.relkind='m' then 'matview'
          else 'table' end id_type,
      ts.spcname AS tablespace
      FROM pg_class c
      JOIN pg_namespace nc ON ((c.relnamespace = nc.oid))
      LEFT JOIN pg_tablespace ts ON (c.reltablespace = ts.oid)
   WHERE NOT pg_is_other_temp_schema(nc.oid) 
     AND c.relkind = ANY (ARRAY['r'::"char", 'm'::"char"])
	ORDER BY nc.nspname, c.relname
</select>

<select id="getViewsDetails" >
  SELECT 
     (nc.nspname)::information_schema.sql_identifier AS id_schema,
     (c.relname)::information_schema.sql_identifier AS id_name,
     'view' id_type
      FROM pg_class c
      JOIN pg_namespace nc ON ((c.relnamespace = nc.oid))
   WHERE NOT pg_is_other_temp_schema(nc.oid) 
     AND c.relkind = ANY (ARRAY['v'::"char"])
	ORDER BY nc.nspname, c.relname
</select>

<select id="getMatViewsDetails" >
  SELECT 
     (nc.nspname)::information_schema.sql_identifier AS id_schema,
     (c.relname)::information_schema.sql_identifier AS id_name,
     'view' id_type
      FROM pg_class c
      JOIN pg_namespace nc ON ((c.relnamespace = nc.oid))
   WHERE NOT pg_is_other_temp_schema(nc.oid) 
     AND c.relkind = ANY (ARRAY['m'::"char"])
	ORDER BY nc.nspname, c.relname
</select>

<select id="getSequencesDetails" >
	SELECT 
		seqs.sequence_schema sequence_owner,
		seqs.sequence_name sequence_name,
		seqs.minimum_value min_value,
		seqs.maximum_value max_value,
		'not available' current_value,
		seqs.increment increment_by,
		'{ "serialForColumn":"'     || ts.column_name ||'", '||
		  '"dataType":"'            || seqs.data_type ||'", '||
		  '"numericPrecision":"'    || seqs.numeric_precision||'", '||
		  '"sequenceCatalog":"'     || seqs.sequence_catalog||'", '||
		  '"cycleOption":"'         || seqs.cycle_option    ||'" } ' json_details
	from information_schema.sequences seqs
	left join (
		select 
		n.nspname schem,
		s.relname sequence_name,
		nt.nspname || '.' || t.relname || '.' || a.attname column_name
		from pg_class s 
		JOIN pg_depend d ON d.objid = s.oid 
		JOIN pg_class t ON d.objid = s.oid AND d.refobjid = t.oid 
		JOIN pg_attribute a ON (d.refobjid, d.refobjsubid) = (a.attrelid, a.attnum)
		JOIN pg_namespace n ON n.oid = s.relnamespace 
		JOIN pg_namespace nt ON nt.oid = t.relnamespace 
		WHERE s.relkind     = 'S' 
	) ts on seqs.sequence_schema=ts.schem and seqs.sequence_name=ts.sequence_name
	order by sequence_schema, sequence_name;
</select>

<select id="getSchemasDetails" >
	SELECT schema_name,
	CASE schema_name WHEN 'public' THEN '1' ELSE '0' END is_current
	FROM information_schema.schemata
</select>

<select id="getTablespaceDetails" >
	SELECT 
		t.spcname AS name,
		null    AS status,
		null	AS contents,
		a.rolname AS owner,
		(case when t.spcoptions is null then 'null' else array_to_string(t.spcoptions,',') end) AS options
	FROM pg_tablespace t
	inner join pg_roles a on t.spcowner=a.oid
	ORDER BY 1
</select>


<!-- 
		Oracle specific SQL for table details 
-->

<select id="getTableColumnsDetails" >

  SELECT 
     a.attname AS name,
     format_type(a.atttypid, NULL::integer) AS type,
     case when a.attlen>0 then a.attlen else a.atttypmod-4 end AS length, <!--  TODO : revoir ce calcul -->
     0 AS precision, <!-- TODO -->
     0 AS scale,     <!-- TODO -->
     ad.adsrc AS defaultValue,
	 not attnotnull AS nullable,
     a.attndims,
     a.attisdropped
   FROM 
           pg_class c
      JOIN pg_namespace nc ON c.relnamespace = nc.oid
      JOIN pg_attribute a  ON a.attrelid = c.oid
      LEFT JOIN pg_attrdef ad ON (a.attrelid = ad.adrelid AND a.attnum = ad.adnum)
   WHERE 
	upper(nc.nspname)=#{owner} and c.relname=#{tableName} and a.attnum > 0 
	order by a.attnum

</select>

<select id="getTableIndexesDetails" >
	SELECT
	    nc.nspname      AS owner,
	    t.relname       AS tableName,
	    i.relname       AS name,
	    am.amname       AS type,
	    ix.indisunique	AS uniqueness,
	    string_agg(att.attname, ',' order by array_position(ix.indkey, att.attnum)) AS columns,
	    tbs.spcname     AS tablespace,
	    false           AS partitioning
	FROM
	         pg_class t
	    JOIN pg_index ix            ON t.oid = ix.indrelid
	    JOIN pg_class i             ON i.oid = ix.indexrelid
        JOIN pg_namespace nc        ON t.relnamespace = nc.oid
	    JOIN pg_am am               ON i.relam = am.oid
	    JOIN pg_attribute att       ON t.oid = att.attrelid AND att.attnum = any(ix.indkey) AND NOT att.attisdropped 
	    LEFT JOIN pg_tablespace tbs ON tbs.oid = i.reltablespace
	WHERE
	    t.relkind IN ('r', 'm')
	    AND upper(nc.nspname) = upper(#{owner}) 
	    AND t.relname = #{tableName}
	GROUP BY
		nc.nspname, t.relname, i.relname, am.amname, ix.indisunique, tbs.spcname 
</select>

<select id="getTableConstraintsDetails" >
	SELECT 
	    c.conname::information_schema.sql_identifier AS name,
	    case when c.contype='f' then 'R' else upper(c.contype) end AS type,
	    string_agg(a.attname, ',' order by array_position(c.conkey, a.attnum)) columns,
	    case when c.contype='x' then 'exclusion: ' || (select string_agg(pg_proc.proname, ',') from pg_operator join pg_proc on pg_proc.oid=pg_operator.oprcode where pg_operator.oid=any('{1513}'::int[]))
	    else c.consrc end checkCondition,
	    <!--  TODO : fnr.nspname::information_schema.sql_identifier ?? --> null AS fkConstraintOwner,
	    <!--  TODO : fnr.nspname::information_schema.sql_identifier ?? --> null AS  fkConstraintName,
	    fr.relname::information_schema.sql_identifier AS fkTable,
	    string_agg(fa.attname, ',' order by array_position(c.confkey, fa.attnum)) fkColumns
	FROM pg_namespace nr
	    join pg_class r on nr.oid = r.relnamespace 
	    join pg_constraint c on r.oid = c.conrelid 
	    join pg_namespace nc on nc.oid = c.connamespace 
	    join pg_attribute a on r.oid = a.attrelid AND a.attnum = any(c.conkey) AND NOT a.attisdropped
	    left join pg_class fr on fr.oid = c.confrelid
	    left join pg_attribute fa on fr.oid = fa.attrelid AND fa.attnum = any(c.confkey) AND NOT fa.attisdropped
	    left join pg_namespace fnr on fnr.oid = fr.relnamespace 
	WHERE 
	    c.contype = ANY (ARRAY['p'::"char", 'u'::"char", 'f'::"char", 'c'::"char", 'x'::"char"])
	AND r.relkind = 'r'::"char" AND NOT pg_is_other_temp_schema(nr.oid) 
	AND upper(nc.nspname) = upper(#{owner})
	AND r.relname = #{tableName}
	group by c.conname, c.contype, c.conkey, c.consrc, fnr.nspname, fr.relname, c.confkey
</select>

<select id="getTableFks" resultType="org.mitsi.api.datasources.Constraint" fetchSize="2000">
	SELECT * FROM (
		SELECT 
		   'toTheTable' AS fkDirection, 
		    c.conname::information_schema.sql_identifier AS name,
		    case when c.contype='f' then 'R' else upper(c.contype) end AS type,
		    string_agg(a.attname, ',' order by array_position(c.conkey, a.attnum)) columns,
		    <!--  TODO : nc.nspname::information_schema.sql_identifier ?? --> null AS fkConstraintOwner,
		    <!--  TODO : fnr.nspname::information_schema.sql_identifier ?? --> null AS  fkConstraintName,
		    r.relname::information_schema.sql_identifier AS fkTable,
		    string_agg(fa.attname, ',' order by array_position(c.confkey, fa.attnum)) fkColumns
		FROM pg_namespace nr
		    join pg_class r on nr.oid = r.relnamespace 
		    join pg_constraint c on r.oid = c.conrelid 
		    join pg_namespace nc on nc.oid = c.connamespace 
		    join pg_attribute a on r.oid = a.attrelid AND a.attnum = any(c.conkey) AND NOT a.attisdropped
		    left join pg_class fr on fr.oid = c.confrelid
		    left join pg_attribute fa on fr.oid = fa.attrelid AND fa.attnum = any(c.confkey) AND NOT fa.attisdropped
		    left join pg_namespace fnr on fnr.oid = fr.relnamespace 
		WHERE 
		    c.contype = 'f'
		AND r.relkind = 'r'::"char" AND NOT pg_is_other_temp_schema(nr.oid) 
		AND upper(fnr.nspname) = upper(#{owner})
		AND fr.relname = #{tableName}
		group by c.conname, c.contype, c.conkey, nc.nspname, fnr.nspname, r.relname, c.confkey
	UNION ALL
		SELECT 
		   'fromTheTable' AS fkDirection, 
		    c.conname::information_schema.sql_identifier AS name,
		    case when c.contype='f' then 'R' else upper(c.contype) end AS type,
		    string_agg(a.attname, ',' order by array_position(c.conkey, a.attnum)) columns,
		    fnr.nspname::information_schema.sql_identifier AS fkConstraintOwner,
		    fr.relname::information_schema.sql_identifier AS fkTable,
		    fnr.nspname::information_schema.sql_identifier AS  fkConstraintName,
		    string_agg(fa.attname, ',' order by array_position(c.confkey, fa.attnum)) fkColumns
		FROM pg_namespace nr
		    join pg_class r on nr.oid = r.relnamespace 
		    join pg_constraint c on r.oid = c.conrelid 
		    join pg_namespace nc on nc.oid = c.connamespace 
		    join pg_attribute a on r.oid = a.attrelid AND a.attnum = any(c.conkey) AND NOT a.attisdropped
		    left join pg_class fr on fr.oid = c.confrelid
		    left join pg_attribute fa on fr.oid = fa.attrelid AND fa.attnum = any(c.confkey) AND NOT fa.attisdropped
		    left join pg_namespace fnr on fnr.oid = fr.relnamespace 
		WHERE 
		    c.contype = 'f'::"char"
		AND r.relkind = 'r'::"char" AND NOT pg_is_other_temp_schema(nr.oid) 
		AND upper(nc.nspname) = upper(#{owner})
		AND r.relname = #{tableName}
		group by c.conname, c.contype, c.conkey, fnr.nspname, fr.relname, c.confkey	
	) sub
	ORDER BY fkDirection, name
</select>


</mapper>