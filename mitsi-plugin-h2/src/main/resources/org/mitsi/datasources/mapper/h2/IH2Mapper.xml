<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mitsi.datasources.mapper.h2.IH2Mapper">


<resultMap id="SchemaResultMap" type="org.mitsi.datasources.Schema">
	<result property="name" column="schema_name"/>
	<result property="current" column="is_current"/>
</resultMap>

<resultMap id="DatabaseObjectResultMap" type="org.mitsi.datasources.DatabaseObject">
  <constructor>
    <idArg column="id_type" javaType="String"/>
    <idArg column="id_schema" javaType="String"/>
    <idArg column="id_name" javaType="String"/>
  </constructor>
  <result property="secondaryType" column="secondary_type"/>
  <result property="description" column="object_comment"/>
  <collection property="columns" ofType="org.mitsi.datasources.Column">
      <result property="name" column="column_name"/>
      <result property="description" column="column_comment"/>
      <result property="type" column="column_type"/>
      <result property="length" column="column_length"/>
      <result property="precision" column="column_precision"/>
      <result property="scale" column="column_scale"/>
      <result property="defaultValue" column="column_default_value"/>
      <result property="nullable" column="column_nullable"/>
  </collection>
</resultMap>




<!-- 
			mitsi standard SQL 
-->

<select id="testOK" resultType="String">
	SELECT TO_CHAR(current_date, 'YYYYMMDD hh24:mi:ss')
</select>

<select id="getAllSchemas" resultMap="SchemaResultMap" fetchSize="2000">
	SELECT schema_name,
	CASE schema_name WHEN #{owner} THEN '1' ELSE '0' END is_current 
	FROM information_schema.schemata
</select>


<select id="getTablesAndViews" resultMap="DatabaseObjectResultMap" fetchSize="2000">
	SELECT 
		t.table_schema 		id_schema, 
		t.table_name id_name, 
		CASE t.table_type 
		WHEN 'TABLE' THEN 'table'
		WHEN 'SYSEM TABLE' THEN 'table' 
		WHEN 'VIEW' THEN 'view' <!-- todo : verifier les differents table_type -->
		ELSE null 
		END id_type,
	 t.table_type secondary_type, 
    c.column_name column_name,
    c.type_name column_type,
    DECODE(c.type_name, 'VARCHAR', CHARACTER_MAXIMUM_LENGTH, null) column_length,
    DECODE(c.type_name, 'VARCHAR', null, numeric_precision) column_precision,
    DECODE(c.type_name, 'VARCHAR', null, numeric_scale) column_scale,
    column_default column_default_value,
    DECODE(IS_NULLABLE, 'YES', 'true', 'false') column_nullable,
    t.remarks object_comment,
    c.remarks column_comment
	FROM information_schema.tables t
	   JOIN information_schema.columns c ON t.table_catalog=c.table_catalog AND t.table_schema=c.table_schema AND t.table_name=c.table_name
    WHERE t.table_schema = #{owner}
	ORDER BY t.table_schema, t.table_name, t.table_type, c.ordinal_position
</select>

<select id="getSchemaIndexes" resultType="org.mitsi.datasources.Index" fetchSize="2000">
	select  
	  i.table_schema owner,
	  i.table_name tableName,
	  i.index_name name,
	  i.index_type type,
	  CASE i.non_unique WHEN 1 THEN 'f' ELSE 't' END uniqueness,
	  GROUP_CONCAT(i.column_name ORDER BY i.ordinal_position SEPARATOR ',') columns	
	FROM information_schema.indexes i
	WHERE 
      i.table_schema = #{owner}
	GROUP BY i.table_schema,
	  i.table_name,
	  i.index_name,
	  i.index_type
</select>

<select id="getSchemaConstraints" resultType="org.mitsi.datasources.Constraint" fetchSize="2000">
SELECT 
	  c.table_schema owner,
	  c.constraint_name name,
	  c.table_name tableName,
	  CASE c.constraint_type
	  WHEN 'PRIMARY KEY' THEN 'P' 
	  WHEN 'UNIQUE' THEN 'U' 
	  WHEN 'REFERENTIAL' THEN 'R' 
	  ELSE 'C' END type,
	  c.column_list  columns,
	  r.pktable_schema fkConstraintOwner,
	  r.pktable_name fkTable,
	  r.pk_name fkConstraintName,
	  GROUP_CONCAT(r.pkcolumn_name ORDER BY r.ordinal_position SEPARATOR ',') fkColumns
	FROM information_schema.constraints c
	LEFT JOIN information_schema.cross_references r ON (
					c.constraint_catalog=r.fktable_catalog AND 
					c.constraint_schema=r.fktable_schema AND 
					c.constraint_name=r.fk_name )
	WHERE c.table_schema = #{owner}
    GROUP BY
      c.table_schema,
	  c.constraint_name,
	  c.table_name,
	  c.constraint_type,
      c.column_list,
      r.fktable_schema,
	  r.fktable_name,
	  r.pk_name 
</select>

<select id="getData" >
	SELECT * FROM ${owner}.${tableName}							
	<if test="filters!=null and filters.length > 0">
		WHERE <foreach item="filter" collection="filters" open="" separator=" AND " close="">
		 ${filter.name} = #{filter.filter} </foreach>
	</if>
	<if test="orderByColumns!=null and orderByColumns.length > 0">
		ORDER BY <foreach item="orderByColumn" collection="orderByColumns" open="" separator=", " close=""
		> ${orderByColumn.column}<choose><when test="orderByColumn.ascending">ASC</when><otherwise>DESC</otherwise></choose></foreach>
	</if>
	LIMIT #{count} OFFSET #{fromRow} 
</select>


<!-- 
			Oracle specific SQL for database details 
-->


<select id="getTablesDetails" >
	SELECT * 
	FROM information_schema.tables t
       WHERE table_type IN ('SYSTEM TABLE', 'TABLE') <!-- TODO : revoir les table_type -->
	ORDER BY t.table_catalog, t.table_schema, t.table_name
</select>

<select id="getViewsDetails" >
	SELECT * 
	FROM information_schema.tables t
       WHERE table_type IN ('VIEW') <!-- TODO : revoir les table_type -->
	ORDER BY t.table_catalog, t.table_schema, t.table_name
</select>

<select id="getSequencesDetails">
	select * from INFORMATION_SCHEMA.SEQUENCES 
	order by sequence_schema, sequence_name
</select>

<select id="getSchemasDetails" >
	select * from INFORMATION_SCHEMA.SCHEMATA  
	order by schema_name
</select>


<!-- 
		Oracle specific SQL for table details 
-->

<!-- because the java method is annotated with @MitsiColumnsAsRows, every column will be displayed in the table details as a new row -->
<select id="getTableMiscellaneousDetails" >
	select * from information_schema.tables where table_schema=#{owner} and table_name=#{tableName}
</select>

<select id="getTableColumnsDetails" >
	select 
	c.*
	from INFORMATION_SCHEMA.COLUMNS c 
	where c.table_schema=#{owner} and c.table_name=#{tableName} order by c.ordinal_position
</select>

<select id="getTableIndexesDetails" >
	select  
	  i.*
	  from INFORMATION_SCHEMA.INDEXES i
      where i.table_name=#{owner} and i.table_schema=#{tableName}
</select>

<select id="getTableConstraintsDetails" >
	select  
	 c.*
	  from INFORMATION_SCHEMA.CONSTRAINTS c
	where c.table_name=#{owner} and c.constraint_schema=#{tableName}
</select>

</mapper>