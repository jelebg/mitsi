<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mitsi.datasources.mapper.mysql.IMySqlMapper">


<resultMap id="SchemaResultMap" type="org.mitsi.datasources.Schema">
	<result property="name" column="schema_name"/>
	<result property="current" column="is_current"/>
</resultMap>

<resultMap id="DatabaseObjectResultMap" type="org.mitsi.datasources.DatabaseObject">
  <constructor>
    <idArg column="id_type" javaType="String"/>
    <idArg column="id_schema" javaType="String"/>
    <idArg column="id_name" javaType="String"/>
  </constructor>
  <result property="secondaryType" column="secondary_type"/>
  <result property="description" column="object_comment"/>
  <collection property="columns" ofType="org.mitsi.datasources.Column">
      <result property="name" column="column_name"/>
      <result property="description" column="column_comment"/>
      <result property="type" column="column_type"/>
      <result property="length" column="column_length"/>
      <result property="precision" column="column_precision"/>
      <result property="scale" column="column_scale"/>
      <result property="defaultValue" column="column_default_value"/>
      <result property="nullable" column="column_nullable"/>
  </collection>
</resultMap>

<!-- 
			mitsi standard SQL 
-->

<select id="testOK" resultType="String">
	SELECT DATE_FORMAT(SYSDATE(), '%Y-%m-%d %H:%i:%s');
</select>

<select id="getAllSchemas" resultMap="SchemaResultMap" fetchSize="2000">
<!--  todo : gerer les catalogues -->
	SELECT schema_name,
	CASE 
	WHEN #{owner} IS NOT NULL AND schema_name = #{owner}   THEN '1'
	WHEN #{owner} IS NULL     AND schema_name = database() THEN '1' 
	ELSE '0' END is_current <!--  database a verifier -->
	FROM information_schema.schemata 
</select>


<select id="getTablesAndViews" resultMap="DatabaseObjectResultMap" fetchSize="2000">
	SELECT 
		t.table_schema 		id_schema, 
		t.table_name id_name, 
		CASE t.table_type 
		WHEN 'BASE TABLE' THEN 'table'
		WHEN 'VIEW' THEN 'view' 
		WHEN 'SYSTEM VIEW' THEN 'view' 
		<!-- no materialized view in mysql --> 
		ELSE null 
		END id_type,
	CONCAT(t.table_type, ' / ', t.engine) secondary_type, 
    c.column_name column_name,
    c.data_type column_type,
    IF(c.data_type = 'varchar', CHARACTER_MAXIMUM_LENGTH, null) column_length,
    numeric_precision column_precision,
    numeric_scale column_scale,
    column_default column_default_value,
    IF(IS_NULLABLE = 'YES', 'true', 'false') column_nullable,
    t.table_comment object_comment,
    c.column_comment column_comment
	FROM information_schema.tables t
	   JOIN information_schema.columns c ON t.table_catalog=c.table_catalog AND t.table_schema=c.table_schema AND t.table_name=c.table_name
	WHERE t.table_schema = #{owner}
	ORDER BY t.table_schema, t.table_name, t.table_type, c.ordinal_position
</select>

<select id="getSchemaIndexes" resultType="org.mitsi.datasources.Index" fetchSize="2000">
	select  
	  s.table_schema owner,
	  s.table_name tableName,
	  s.index_name name,
	  s.index_type type,
	  CASE s.non_unique WHEN 1 THEN 'f' ELSE 't' END uniqueness,
	  GROUP_CONCAT(s.column_name ORDER BY seq_in_index SEPARATOR ',') columns	
	FROM information_schema.statistics s
	WHERE 
      s.table_schema = #{owner}
	GROUP BY s.table_schema,
	  s.table_name,
	  s.index_name,
	  s.index_type
</select>

<select id="getSchemaConstraints" resultType="org.mitsi.datasources.Constraint" fetchSize="2000">
	SELECT 
	  c.table_schema owner,
	  c.constraint_name name,
	  c.table_name tableName,
	  CASE c.constraint_type
	  WHEN 'PRIMARY KEY' THEN 'P' 
	  WHEN 'UNIQUE' THEN 'U' 
	  WHEN 'FOREIGN KEY' THEN 'R' 
	  ELSE 'C' END type,
	  ( SELECT GROUP_CONCAT(cc.column_name ORDER BY cc.ordinal_position SEPARATOR ',')
	    FROM information_schema.key_column_usage cc
	    WHERE c.constraint_catalog=cc.constraint_catalog AND 
			  c.constraint_schema=cc.constraint_schema AND 
			  c.constraint_name=cc.constraint_name AND
			  c.table_schema=cc.table_schema AND
			  c.table_name=cc.table_name
	  ) columns,
	  rc.table_schema fkConstraintOwner,
	  rc.table_name fkTable,
	  rc.constraint_name fkConstraintName,
	  ( SELECT GROUP_CONCAT(rcc.column_name ORDER BY rcc.ordinal_position SEPARATOR ',')
	    FROM information_schema.key_column_usage rcc
	    WHERE rc.constraint_catalog=rcc.constraint_catalog AND 
			  rc.constraint_schema=rcc.constraint_schema AND 
			  rc.constraint_name=rcc.constraint_name AND
			  rc.table_name=rcc.table_name
	  )  fkColumns
	FROM information_schema.table_constraints c
	LEFT  JOIN information_schema.referential_constraints r ON (
					c.constraint_catalog=r.constraint_catalog AND 
					c.constraint_schema=r.constraint_schema AND 
					c.constraint_name=r.constraint_name)
	LEFT  JOIN information_schema.table_constraints rc ON (
					rc.constraint_catalog=r.unique_constraint_catalog AND 
					rc.constraint_schema=r.unique_constraint_schema AND 
					rc.constraint_name=r.unique_constraint_name AND
			  		rc.table_name=r.referenced_table_name)
	WHERE c.table_schema = #{owner}
</select>

<select id="getData" >
	SELECT * FROM ${owner}.${tableName}							
	<if test="filters!=null and filters.length > 0">
		WHERE <foreach item="filter" collection="filters" open="" separator=" AND " close="">
		 ${filter.name} = #{filter.filter} </foreach>
	</if>
	<if test="orderByColumns!=null and orderByColumns.length > 0">
		ORDER BY <foreach item="orderByColumn" collection="orderByColumns" open="" separator=", " close=""
		> ${orderByColumn.column}<choose><when test="orderByColumn.ascending">ASC</when><otherwise>DESC</otherwise></choose></foreach>
	</if>
	LIMIT #{count} OFFSET #{fromRow} 
</select>


<!-- 
			Oracle specific SQL for database details 
-->


<select id="getTablesDetails" >
	SELECT * 
	FROM information_schema.tables t
	ORDER BY t.table_catalog, t.table_schema, t.table_name
</select>

<select id="getViewsDetails" >
	SELECT * 
	FROM information_schema.views v
	ORDER BY v.table_catalog, v.table_schema, v.table_name
</select>

<select id="getSchemasDetails" >
	SELECT * 
	FROM information_schema.schemata
	ORDER BY 1, 2, 3
</select>

<select id="getTablespaceDetails" >
	SELECT * 
	FROM information_schema.tablespaces 
	ORDER BY 1
</select>



<!-- 
		Oracle specific SQL for table details 
-->

<select id="getTableMiscellaneousDetails" >
	SELECT * 
	FROM information_schema.tables t
	WHERE t.table_schema=#{owner} and t.table_name=#{tableName}
</select>

<select id="getTableColumnsDetails" >
	SELECT c.*
	FROM information_schema.columns c
	WHERE c.table_schema=#{owner} AND c.table_name=#{tableName} ORDER BY ordinal_position
</select>

<select id="getTableIndexesDetails" >
	select  
	  s.table_schema owner,
	  s.table_name tableName,
	  s.index_name name,
	  s.index_type type,
	  CASE s.non_unique WHEN 1 THEN 'f' ELSE 't' END uniqueness,
	  GROUP_CONCAT(s.column_name ORDER BY seq_in_index SEPARATOR ',') columns	
	FROM information_schema.statistics s
	WHERE s.table_schema = #{owner}
	AND   s.table_name=#{tableName} 
	ORDER BY seq_in_index
</select>

<select id="getTableConstraintsDetails" >
	SELECT 
	  c.table_schema owner,
	  c.constraint_name name,
	  c.table_name tableName,
	  CASE c.constraint_type
	  WHEN 'PRIMARY KEY' THEN 'P' 
	  WHEN 'UNIQUE' THEN 'U' 
	  WHEN 'FOREIGN KEY' THEN 'R' 
	  ELSE 'C' END type,
	  ( SELECT GROUP_CONCAT(cc.column_name ORDER BY cc.ordinal_position SEPARATOR ',')
	    FROM information_schema.key_column_usage cc
	    WHERE c.constraint_catalog=cc.constraint_catalog AND 
			  c.constraint_schema=cc.constraint_schema AND 
			  c.constraint_name=cc.constraint_name AND
			  c.table_schema=cc.table_schema AND
			  c.table_name=cc.table_name
	  ) columns,
	  rc.table_schema fkConstraintOwner,
	  rc.table_name fkTable,
	  rc.constraint_name fkConstraintName,
	  ( SELECT GROUP_CONCAT(rcc.column_name ORDER BY rcc.ordinal_position SEPARATOR ',')
	    FROM information_schema.key_column_usage rcc
	    WHERE rc.constraint_catalog=rcc.constraint_catalog AND 
			  rc.constraint_schema=rcc.constraint_schema AND 
			  rc.constraint_name=rcc.constraint_name AND
			  rc.table_name=rcc.table_name
	  )  fkColumns
	FROM information_schema.table_constraints c
	LEFT  JOIN information_schema.referential_constraints r ON (
					c.constraint_catalog=r.constraint_catalog AND 
					c.constraint_schema=r.constraint_schema AND 
					c.constraint_name=r.constraint_name)
	LEFT  JOIN information_schema.table_constraints rc ON (
					rc.constraint_catalog=r.unique_constraint_catalog AND 
					rc.constraint_schema=r.unique_constraint_schema AND 
					rc.constraint_name=r.unique_constraint_name AND
			  		rc.table_name=r.referenced_table_name)
	WHERE c.table_schema = #{owner}
	AND c.table_name = #{tableName}
</select>

<select id="getTablePartitionDetails" >
	SELECT p.* 
	FROM information_schema.partitions p
	WHERE p.table_schema = #{owner}
	AND   p.table_name = #{tableName}
	ORDER BY p.partition_ordinal_position, p.subpartition_ordinal_position  
</select>

<select id="getTableFks" resultType="org.mitsi.datasources.Constraint" fetchSize="2000">
	SELECT u.* 
	FROM (
		SELECT 
		  'fromTheTable' fkDirection, 
		  c.constraint_name name,
		  CONCAT(rc.table_schema, '.', rc.table_name) tableName,
		  ( SELECT GROUP_CONCAT(cc.column_name ORDER BY cc.ordinal_position SEPARATOR ',')
		    FROM information_schema.key_column_usage cc
		    WHERE c.constraint_catalog=cc.constraint_catalog AND 
				  c.constraint_schema=cc.constraint_schema AND 
				  c.constraint_name=cc.constraint_name AND
				  c.table_schema=cc.table_schema AND
				  c.table_name=cc.table_name
		  ) columns,
		  ( SELECT GROUP_CONCAT(rcc.column_name ORDER BY rcc.ordinal_position SEPARATOR ',')
		    FROM information_schema.key_column_usage rcc
		    WHERE rc.constraint_catalog=rcc.constraint_catalog AND 
				  rc.constraint_schema=rcc.constraint_schema AND 
				  rc.constraint_name=rcc.constraint_name AND
				  rc.table_name=rcc.table_name
		  )  fkColumns
		FROM information_schema.table_constraints c
		LEFT  JOIN information_schema.referential_constraints r ON (
						c.constraint_catalog=r.constraint_catalog AND 
						c.constraint_schema=r.constraint_schema AND 
						c.constraint_name=r.constraint_name)
		LEFT  JOIN information_schema.table_constraints rc ON (
						rc.constraint_catalog=r.unique_constraint_catalog AND 
						rc.constraint_schema=r.unique_constraint_schema AND 
						rc.constraint_name=r.unique_constraint_name AND
				  		rc.table_name=r.referenced_table_name)
		WHERE c.constraint_type = 'FOREIGN KEY'
		AND c.table_schema = #{owner}
		AND c.table_name = #{tableName}
	UNION ALL
		SELECT 
		  'toTheTable' fkDirection, 
		  c.constraint_name name,
		  CONCAT(c.table_schema, '.', c.table_name) tableName,
		  ( SELECT GROUP_CONCAT(cc.column_name ORDER BY cc.ordinal_position SEPARATOR ',')
		    FROM information_schema.key_column_usage cc
		    WHERE c.constraint_catalog=cc.constraint_catalog AND 
				  c.constraint_schema=cc.constraint_schema AND 
				  c.constraint_name=cc.constraint_name AND
				  c.table_schema=cc.table_schema AND
				  c.table_name=cc.table_name
		  ) columns,
		  ( SELECT GROUP_CONCAT(rcc.column_name ORDER BY rcc.ordinal_position SEPARATOR ',')
		    FROM information_schema.key_column_usage rcc
		    WHERE rc.constraint_catalog=rcc.constraint_catalog AND 
				  rc.constraint_schema=rcc.constraint_schema AND 
				  rc.constraint_name=rcc.constraint_name AND
				  rc.table_name=rcc.table_name
		  )  fkColumns
		FROM information_schema.table_constraints c
		LEFT  JOIN information_schema.referential_constraints r ON (
						c.constraint_catalog=r.constraint_catalog AND 
						c.constraint_schema=r.constraint_schema AND 
						c.constraint_name=r.constraint_name)
		LEFT  JOIN information_schema.table_constraints rc ON (
						rc.constraint_catalog=r.unique_constraint_catalog AND 
						rc.constraint_schema=r.unique_constraint_schema AND 
						rc.constraint_name=r.unique_constraint_name AND
				  		rc.table_name=r.referenced_table_name)
		WHERE c.constraint_type = 'FOREIGN KEY'
		AND rc.table_schema = #{owner}
		AND rc.table_name = #{tableName}
	) u 
	ORDER BY u.fkDirection, u.name
</select>

</mapper>